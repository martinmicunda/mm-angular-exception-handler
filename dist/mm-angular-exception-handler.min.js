/**
 * An angular module that override default $exceptionHandler service.
 * @version v0.0.0 - 2014-07-23
 * @link https://github.com/martinmicunda/mm-angular-exception-handler
 * @author Martin Micunda
 * @copyright 2014(c) Martin Micunda
 * @license MIT, https://github.com/martinmicunda/mm-angular-exception-handler/blob/master/LICENSE
 */
!function(){"use strict";function n(){var n={appErrorPrefix:"",ravenDns:null,ravenConfig:null,customDns:null};this.setConfigAppErrorPrefix=function(e){n.appErrorPrefix=e||n.appErrorPrefix},this.setConfigRavenDns=function(e){if(!e)throw new Error("RavenDNS must be set!");n.ravenDns=e},this.setConfigRavenConfig=function(e){n.ravenConfig=e||n.ravenConfig},this.setConfigCustomDns=function(e){if(!e)throw new Error("CustomeDNS must be set!");n.customDns=e},this.$get=["Logger","$window","$injector",function(e,r,o){var t=e.getLogger("$exceptionHandler"),i={navigatorAppName:navigator.appName,navigatorUserAgent:navigator.userAgent};if(r.Raven){t.info("Using the RavenJS server-side logging exception handler."),t.info("RavenJS ravenDns {0}",[n.ravenDns]),t.info("RavenJS ravenConfig {0}",[n.ravenConfig]);try{Raven.config(n.ravenDns,n.ravenConfig).install()}catch(a){t.error("Error to configure RavenJS"),t.error(a.toString())}}else n.customDns&&(t.info("Using the custom server-side logging exception handler."),t.info("Custom DNS {0}",[n.customDns]));return function(e,a){var s={exception:e,cause:a},g=n.appErrorPrefix?n.appErrorPrefix+" - "+e.message:e.message;try{if(r.Raven)Raven.captureException(e,{extra:{cause:a,browserInfo:i}});else if(n.customDns){var c=e?e.toString():"",f=e&&e.stack?e.stack.toString():"",u=o.get("$httpBackend");u("POST",n.customDns,angular.toJson({url:r.location.href,message:c,stackTrace:f,cause:a||"",browserInfo:i}),angular.noop,{"content-type":"application/json"})}}catch(v){t.error("Error server-side logging failed"),t.error(v.toString())}t.error(g,null,s)}}]}angular.module("mm.exceptionHandler",["mm.logger"]).provider("$exceptionHandler",n)}();
//# sourceMappingURL=data:application/json;base64,